section#scope
	h4 Scope
	p.fragment.fade-right Definiuje, do których zamiennych mamy dostęp.
	p.fragment.fade-right Rozróżniamy scope blokowy, funkcyjny i globalny.
	pre.fragment.fade-right
		code.javascript.hljs
			| // scope globalny
			| function fn(name) {
			| 	// scope funkcyjny
			| }
			| if (true) {
			|   // scope blokowy
			| }
	p.fragment.fade-right var ma scope funkcyjny
	p.fragment.fade-right let i const ma scope blokowy
section#scope
	h4 Scope
	pre.fragment.fade-right
		code.javascript.hljs
			| const name = "John";
			| function fn(name) {
			| 	console.log(name); //undefined
			| 	const test = "Test";
			| 	console.log(test); // "Test"
			| }
			| fn();
			| console.log(test); // test is not defined
			
section#clousers
	h4 Zwracanie funkcji z funkcji
	pre.fragment.fade-right
		code.javascript.hljs
			| function giveMeFunction() {
			| 	function sayHello() {
			| 		console.log("Hello");
			| 	}
			| 	return sayHello;
			| }
			| 
			| var returnedFunction = giveMeFunction();
			| returnedFunction();			
section#clousers
	h4 Zwracanie funkcji z funkcji
	pre.fragment.fade-right
		code.javascript.hljs
			| function giveMeFunction() {
			| 	return function() {
			| 		console.log("Hello");
			| 	}
			| }
			| 
			| var returnedFunction = giveMeFunction();
			| returnedFunction();			
section#clousers
	h4 Zwracanie funkcji z funkcji
	pre.fragment.fade-right
		code.javascript.hljs
			| function giveMeFunction() {
			| 	return () => console.log("Hello");
			| }
			| 
			| var returnedFunction = giveMeFunction();
			| returnedFunction();
section#clousers
	h4
		a(href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures') Clousers
		|
	p Domknięcie daje dostęp do zakresu(scope'u) funkcji zewnętrznej z funkcji wewenętrznej.
	p Domknięcie tworzone jest w momencie tworzenia funkcji.
section#clousers
	h4 Clousers
	pre.fragment.fade-right
		code.javascript.hljs
			| function functionFactory() {
			| 	var name = "Marcin";
			| 	function sayHello() {
			| 		console.log(name);
			| 	}
			| 	return sayHello;
			| }
			| 
			| var returnedFunction = functionFactory();
			| returnedFunction();
section#hoisting
	p
		a(href='https://developer.mozilla.org/en-US/docs/Glossary/Hoisting') Hoisting
		|  Hoisting to proces, którego efektem jest "wyciąganie" deklaracji funkcji, zmiennych i class na samą górę scope'u, przed wykonaniem kodu.
	pre.fragment.fade-right
		code.javascript.hljs
			| function fn() {
			| 	console.log(test); //undefined
			| 	var test = "Test";
			| 	console.log(test); // "Test"
			| }
section#hoisting
	p.fragment.fade-right var przed przypisaniem wartości będzie zawsze równy undefined
	p.fragment.fade-right funkcja jest gotowa do wywołania
	p.fragment.fade-right funkcja jest gotowa do użycia
	p.fragment.fade-right przy próbie wykorzystania let i const dostaniemy Reference Error
